/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, HostListener } from '@angular/core';
import { RouterLinkWithHref, Router, ActivatedRoute } from '@angular/router';
import { LocationStrategy } from '@angular/common';
import { timer } from 'rxjs';
/**
 * Extends {\@link RouterLinkWithHref}
 * @see https://github.com/angular/angular/blob/master/packages/router/src/directives/router_link.ts
 */
export class RouterLinkWithHrefDelay extends RouterLinkWithHref {
    /**
     * @param {?} router
     * @param {?} route
     * @param {?} locationStrategy
     */
    constructor(router, route, locationStrategy) {
        super(router, route, locationStrategy);
        this.navigationDelay = 0;
    }
    /**
     * @param {?} commands
     * @return {?}
     */
    set bcRouterLink(commands) {
        this.routerLink = commands;
    }
    /**
     * @param {?} button
     * @param {?} ctrlKey
     * @param {?} metaKey
     * @param {?} shiftKey
     * @return {?}
     */
    onClick(button, ctrlKey, metaKey, shiftKey) {
        // clone the checks being made in super()
        if (button !== 0 || ctrlKey || metaKey || shiftKey) {
            return true;
        }
        if (typeof this.target === 'string' && this.target !== '_self') {
            return true;
        }
        // Omits Observable.timer 'period' argument so  runs once
        this.timerSubscription = timer(this.navigationDelay)
            .subscribe(t => {
            this.timerSubscription.unsubscribe();
            super.onClick(button, ctrlKey, metaKey, shiftKey);
        });
        return false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        // If the component is destroyed before the timer completes
        if (this.timerSubscription) {
            this.timerSubscription.unsubscribe();
        }
    }
}
RouterLinkWithHrefDelay.decorators = [
    { type: Directive, args: [{
                selector: 'a[bcRouterLink]'
            },] },
];
/** @nocollapse */
RouterLinkWithHrefDelay.ctorParameters = () => [
    { type: Router, },
    { type: ActivatedRoute, },
    { type: LocationStrategy, },
];
RouterLinkWithHrefDelay.propDecorators = {
    "navigationDelay": [{ type: Input },],
    "bcRouterLink": [{ type: Input },],
    "onClick": [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] },],
};
function RouterLinkWithHrefDelay_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    RouterLinkWithHrefDelay.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    RouterLinkWithHrefDelay.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    RouterLinkWithHrefDelay.propDecorators;
    /** @type {?} */
    RouterLinkWithHrefDelay.prototype.navigationDelay;
    /** @type {?} */
    RouterLinkWithHrefDelay.prototype.timerSubscription;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLWxpbmstZGVsYXkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYmNvZGVzL25neC1yb3V0ZXJsaW5rLWRlbGF5LyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9yb3V0ZXItbGluay1kZWxheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLEtBQUssRUFBb0IsTUFBTSxNQUFNLENBQUM7Ozs7O0FBUS9DLE1BQU0sOEJBQStCLFNBQVEsa0JBQWtCOzs7Ozs7SUFXM0QsWUFBWSxNQUFjLEVBQUUsS0FBcUIsRUFBRSxnQkFBa0M7UUFDakYsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzsrQkFWaEIsQ0FBQztLQVczQjs7Ozs7UUFSRyxZQUFZLENBQUMsUUFBd0I7UUFDckMsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7Ozs7Ozs7OztJQVUvQixPQUFPLENBQUMsTUFBYyxFQUFFLE9BQWdCLEVBQUUsT0FBZ0IsRUFBRSxRQUFpQjs7UUFFekUsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxPQUFPLElBQUksT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQztTQUNmO1FBRUQsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDN0QsTUFBTSxDQUFDLElBQUksQ0FBQztTQUNmOztRQUdELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQzthQUMvQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDWCxJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDckMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNyRCxDQUFDLENBQUM7UUFFUCxNQUFNLENBQUMsS0FBSyxDQUFDOzs7OztJQUdqQixXQUFXO1FBQ1AsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDOztRQUVwQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUN4QztLQUNKOzs7WUE3Q0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxpQkFBaUI7YUFDOUI7Ozs7WUFUNEIsTUFBTTtZQUFFLGNBQWM7WUFDMUMsZ0JBQWdCOzs7Z0NBV3BCLEtBQUs7NkJBRUwsS0FBSzt3QkFXTCxZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsZUFBZSxFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgSG9zdExpc3RlbmVyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVyTGlua1dpdGhIcmVmLCBSb3V0ZXIsIEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IHRpbWVyLCBTdWJzY3JpcHRpb25MaWtlIH0gZnJvbSAncnhqcyc7XHJcbi8qKlxyXG4gKiBFeHRlbmRzIHtAbGluayBSb3V0ZXJMaW5rV2l0aEhyZWZ9XHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iL21hc3Rlci9wYWNrYWdlcy9yb3V0ZXIvc3JjL2RpcmVjdGl2ZXMvcm91dGVyX2xpbmsudHNcclxuICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdhW2JjUm91dGVyTGlua10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSb3V0ZXJMaW5rV2l0aEhyZWZEZWxheSBleHRlbmRzIFJvdXRlckxpbmtXaXRoSHJlZiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcblxyXG4gICAgQElucHV0KCkgbmF2aWdhdGlvbkRlbGF5ID0gMDtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IGJjUm91dGVyTGluayhjb21tYW5kczogYW55W10gfCBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnJvdXRlckxpbmsgPSBjb21tYW5kcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHRpbWVyU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb25MaWtlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJvdXRlcjogUm91dGVyLCByb3V0ZTogQWN0aXZhdGVkUm91dGUsIGxvY2F0aW9uU3RyYXRlZ3k6IExvY2F0aW9uU3RyYXRlZ3kpIHtcclxuICAgICAgICBzdXBlcihyb3V0ZXIsIHJvdXRlLCBsb2NhdGlvblN0cmF0ZWd5KTtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50LmJ1dHRvbicsICckZXZlbnQuY3RybEtleScsICckZXZlbnQubWV0YUtleScsICckZXZlbnQuc2hpZnRLZXknXSlcclxuICAgIG9uQ2xpY2soYnV0dG9uOiBudW1iZXIsIGN0cmxLZXk6IGJvb2xlYW4sIG1ldGFLZXk6IGJvb2xlYW4sIHNoaWZ0S2V5OiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy8gY2xvbmUgdGhlIGNoZWNrcyBiZWluZyBtYWRlIGluIHN1cGVyKClcclxuICAgICAgICBpZiAoYnV0dG9uICE9PSAwIHx8IGN0cmxLZXkgfHwgbWV0YUtleSB8fCBzaGlmdEtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy50YXJnZXQgPT09ICdzdHJpbmcnICYmIHRoaXMudGFyZ2V0ICE9PSAnX3NlbGYnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gT21pdHMgT2JzZXJ2YWJsZS50aW1lciAncGVyaW9kJyBhcmd1bWVudCBzbyAgcnVucyBvbmNlXHJcbiAgICAgICAgdGhpcy50aW1lclN1YnNjcmlwdGlvbiA9IHRpbWVyKHRoaXMubmF2aWdhdGlvbkRlbGF5KVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgc3VwZXIub25DbGljayhidXR0b24sIGN0cmxLZXksIG1ldGFLZXksIHNoaWZ0S2V5KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICBzdXBlci5uZ09uRGVzdHJveSgpO1xyXG4gICAgICAgIC8vIElmIHRoZSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGJlZm9yZSB0aGUgdGltZXIgY29tcGxldGVzXHJcbiAgICAgICAgaWYgKHRoaXMudGltZXJTdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=