import { __extends } from 'tslib';
import { Directive, Input, HostListener, ContentChildren, ElementRef, Renderer2, ChangeDetectorRef, NgModule } from '@angular/core';
import { RouterLinkWithHref, Router, ActivatedRoute, RouterLinkActive } from '@angular/router';
import { LocationStrategy, CommonModule } from '@angular/common';
import { timer } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Extends {\@link RouterLinkWithHref}
 * @see https://github.com/angular/angular/blob/master/packages/router/src/directives/router_link.ts
 */
var RouterLinkWithHrefDelay = /** @class */ (function (_super) {
    __extends(RouterLinkWithHrefDelay, _super);
    function RouterLinkWithHrefDelay(router, route, locationStrategy) {
        var _this = _super.call(this, router, route, locationStrategy) || this;
        _this.navigationDelay = 0;
        return _this;
    }
    Object.defineProperty(RouterLinkWithHrefDelay.prototype, "bcRouterLink", {
        set: /**
         * @param {?} commands
         * @return {?}
         */
        function (commands) {
            this.routerLink = commands;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} button
     * @param {?} ctrlKey
     * @param {?} metaKey
     * @param {?} shiftKey
     * @return {?}
     */
    RouterLinkWithHrefDelay.prototype.onClick = /**
     * @param {?} button
     * @param {?} ctrlKey
     * @param {?} metaKey
     * @param {?} shiftKey
     * @return {?}
     */
    function (button, ctrlKey, metaKey, shiftKey) {
        var _this = this;
        // clone the checks being made in super()
        if (button !== 0 || ctrlKey || metaKey || shiftKey) {
            return true;
        }
        if (typeof this.target === 'string' && this.target !== '_self') {
            return true;
        }
        // Omits Observable.timer 'period' argument so  runs once
        this.timerSubscription = timer(this.navigationDelay)
            .subscribe(function (t) {
            _this.timerSubscription.unsubscribe();
            _super.prototype.onClick.call(_this, button, ctrlKey, metaKey, shiftKey);
        });
        return false;
    };
    /**
     * @return {?}
     */
    RouterLinkWithHrefDelay.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        // If the component is destroyed before the timer completes
        if (this.timerSubscription) {
            this.timerSubscription.unsubscribe();
        }
    };
    RouterLinkWithHrefDelay.decorators = [
        { type: Directive, args: [{
                    selector: 'a[bcRouterLink]'
                },] },
    ];
    /** @nocollapse */
    RouterLinkWithHrefDelay.ctorParameters = function () { return [
        { type: Router, },
        { type: ActivatedRoute, },
        { type: LocationStrategy, },
    ]; };
    RouterLinkWithHrefDelay.propDecorators = {
        "navigationDelay": [{ type: Input },],
        "bcRouterLink": [{ type: Input },],
        "onClick": [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] },],
    };
    return RouterLinkWithHrefDelay;
}(RouterLinkWithHref));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Extends {\@link RouterLinkActive }
 * @see https://github.com/angular/angular/blob/master/packages/router/src/directives/router_link_active.ts
 */
var RouterLinkActiveDelay = /** @class */ (function (_super) {
    __extends(RouterLinkActiveDelay, _super);
    function RouterLinkActiveDelay(router, element, renderer, cdr) {
        return _super.call(this, router, element, renderer, cdr) || this;
    }
    Object.defineProperty(RouterLinkActiveDelay.prototype, "bcRouterLinkActive", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.routerLinkActive = data;
        },
        enumerable: true,
        configurable: true
    });
    RouterLinkActiveDelay.decorators = [
        { type: Directive, args: [{
                    selector: 'a[bcRouterLinkActive]'
                },] },
    ];
    /** @nocollapse */
    RouterLinkActiveDelay.ctorParameters = function () { return [
        { type: Router, },
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ChangeDetectorRef, },
    ]; };
    RouterLinkActiveDelay.propDecorators = {
        "linksWithHrefs": [{ type: ContentChildren, args: [RouterLinkWithHrefDelay, { descendants: true },] },],
        "bcRouterLinkActive": [{ type: Input },],
    };
    return RouterLinkActiveDelay;
}(RouterLinkActive));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var RouterLinkDelayModule = /** @class */ (function () {
    function RouterLinkDelayModule() {
    }
    RouterLinkDelayModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        RouterLinkWithHrefDelay,
                        RouterLinkActiveDelay
                    ],
                    exports: [
                        RouterLinkWithHrefDelay,
                        RouterLinkActiveDelay
                    ]
                },] },
    ];
    /** @nocollapse */
    RouterLinkDelayModule.ctorParameters = function () { return []; };
    return RouterLinkDelayModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { RouterLinkWithHrefDelay, RouterLinkActiveDelay, RouterLinkDelayModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmNvZGVzLW5neC1yb3V0ZXJsaW5rLWRlbGF5LmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9AYmNvZGVzL25neC1yb3V0ZXJsaW5rLWRlbGF5L2RpcmVjdGl2ZXMvcm91dGVyLWxpbmstZGVsYXkudHMiLCJuZzovL0BiY29kZXMvbmd4LXJvdXRlcmxpbmstZGVsYXkvZGlyZWN0aXZlcy9yb3V0ZXItbGluay1hY3RpdmUtZGVsYXkudHMiLCJuZzovL0BiY29kZXMvbmd4LXJvdXRlcmxpbmstZGVsYXkvcm91dGVyLWxpbmstZGVsYXkubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEhvc3RMaXN0ZW5lciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJvdXRlckxpbmtXaXRoSHJlZiwgUm91dGVyLCBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IExvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyB0aW1lciwgU3Vic2NyaXB0aW9uTGlrZSB9IGZyb20gJ3J4anMnO1xyXG4vKipcclxuICogRXh0ZW5kcyB7QGxpbmsgUm91dGVyTGlua1dpdGhIcmVmfVxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi9tYXN0ZXIvcGFja2FnZXMvcm91dGVyL3NyYy9kaXJlY3RpdmVzL3JvdXRlcl9saW5rLnRzXHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnYVtiY1JvdXRlckxpbmtdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUm91dGVyTGlua1dpdGhIcmVmRGVsYXkgZXh0ZW5kcyBSb3V0ZXJMaW5rV2l0aEhyZWYgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG5cclxuICAgIEBJbnB1dCgpIG5hdmlnYXRpb25EZWxheSA9IDA7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBiY1JvdXRlckxpbmsoY29tbWFuZHM6IGFueVtdIHwgc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXJMaW5rID0gY29tbWFuZHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB0aW1lclN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uTGlrZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihyb3V0ZXI6IFJvdXRlciwgcm91dGU6IEFjdGl2YXRlZFJvdXRlLCBsb2NhdGlvblN0cmF0ZWd5OiBMb2NhdGlvblN0cmF0ZWd5KSB7XHJcbiAgICAgICAgc3VwZXIocm91dGVyLCByb3V0ZSwgbG9jYXRpb25TdHJhdGVneSk7XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudC5idXR0b24nLCAnJGV2ZW50LmN0cmxLZXknLCAnJGV2ZW50Lm1ldGFLZXknLCAnJGV2ZW50LnNoaWZ0S2V5J10pXHJcbiAgICBvbkNsaWNrKGJ1dHRvbjogbnVtYmVyLCBjdHJsS2V5OiBib29sZWFuLCBtZXRhS2V5OiBib29sZWFuLCBzaGlmdEtleTogYm9vbGVhbik6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIGNsb25lIHRoZSBjaGVja3MgYmVpbmcgbWFkZSBpbiBzdXBlcigpXHJcbiAgICAgICAgaWYgKGJ1dHRvbiAhPT0gMCB8fCBjdHJsS2V5IHx8IG1ldGFLZXkgfHwgc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMudGFyZ2V0ID09PSAnc3RyaW5nJyAmJiB0aGlzLnRhcmdldCAhPT0gJ19zZWxmJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE9taXRzIE9ic2VydmFibGUudGltZXIgJ3BlcmlvZCcgYXJndW1lbnQgc28gIHJ1bnMgb25jZVxyXG4gICAgICAgIHRoaXMudGltZXJTdWJzY3JpcHRpb24gPSB0aW1lcih0aGlzLm5hdmlnYXRpb25EZWxheSlcclxuICAgICAgICAgICAgLnN1YnNjcmliZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGltZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIHN1cGVyLm9uQ2xpY2soYnV0dG9uLCBjdHJsS2V5LCBtZXRhS2V5LCBzaGlmdEtleSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgc3VwZXIubmdPbkRlc3Ryb3koKTtcclxuICAgICAgICAvLyBJZiB0aGUgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBiZWZvcmUgdGhlIHRpbWVyIGNvbXBsZXRlc1xyXG4gICAgICAgIGlmICh0aGlzLnRpbWVyU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUm91dGVyTGlua0FjdGl2ZSwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBDb250ZW50Q2hpbGRyZW4sIFF1ZXJ5TGlzdCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUm91dGVyTGlua1dpdGhIcmVmRGVsYXkgfSBmcm9tICcuL3JvdXRlci1saW5rLWRlbGF5JztcclxuXHJcbi8qKlxyXG4gKiBFeHRlbmRzIHtAbGluayBSb3V0ZXJMaW5rQWN0aXZlIH1cclxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3JvdXRlci9zcmMvZGlyZWN0aXZlcy9yb3V0ZXJfbGlua19hY3RpdmUudHNcclxuICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdhW2JjUm91dGVyTGlua0FjdGl2ZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSb3V0ZXJMaW5rQWN0aXZlRGVsYXkgZXh0ZW5kcyBSb3V0ZXJMaW5rQWN0aXZlIHtcclxuXHJcbiAgICAvLyBPdmVycmlkZSB0aGUgbGlua3NXaXRoSHJlZnMgd2l0aCBvdXIgc2VsZWN0b3IgY29tcG9uZW50XHJcbiAgICBAQ29udGVudENoaWxkcmVuKFJvdXRlckxpbmtXaXRoSHJlZkRlbGF5LCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pXHJcbiAgICBsaW5rc1dpdGhIcmVmczogUXVlcnlMaXN0PFJvdXRlckxpbmtXaXRoSHJlZkRlbGF5PjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihyb3V0ZXI6IFJvdXRlciwgZWxlbWVudDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG4gICAgICAgIHN1cGVyKHJvdXRlciwgZWxlbWVudCwgcmVuZGVyZXIsIGNkcik7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBiY1JvdXRlckxpbmtBY3RpdmUoZGF0YTogc3RyaW5nW10gfCBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnJvdXRlckxpbmtBY3RpdmUgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUm91dGVyTGlua1dpdGhIcmVmRGVsYXkgfSBmcm9tICcuL2RpcmVjdGl2ZXMvcm91dGVyLWxpbmstZGVsYXknO1xuaW1wb3J0IHsgUm91dGVyTGlua0FjdGl2ZURlbGF5IH0gZnJvbSAnLi9kaXJlY3RpdmVzL3JvdXRlci1saW5rLWFjdGl2ZS1kZWxheSc7XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1xuICAgICAgICBDb21tb25Nb2R1bGVcbiAgICBdLFxuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBSb3V0ZXJMaW5rV2l0aEhyZWZEZWxheSxcbiAgICAgICAgUm91dGVyTGlua0FjdGl2ZURlbGF5XG4gICAgXSxcbiAgICBleHBvcnRzOiBbXG4gICAgICAgIFJvdXRlckxpbmtXaXRoSHJlZkRlbGF5LFxuICAgICAgICBSb3V0ZXJMaW5rQWN0aXZlRGVsYXlcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFJvdXRlckxpbmtEZWxheU1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6WyJ0c2xpYl8xLl9fZXh0ZW5kcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0lBVzZDQSwyQ0FBa0I7SUFXM0QsaUNBQVksTUFBYyxFQUFFLEtBQXFCLEVBQUUsZ0JBQWtDO1FBQXJGLFlBQ0ksa0JBQU0sTUFBTSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxTQUN6QztnQ0FYMEIsQ0FBQzs7S0FXM0I7MEJBUkcsaURBQVk7Ozs7O2tCQUFDLFFBQXdCO1lBQ3JDLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDOzs7Ozs7Ozs7Ozs7SUFVL0IseUNBQU87Ozs7Ozs7Y0FBQyxNQUFjLEVBQUUsT0FBZ0IsRUFBRSxPQUFnQixFQUFFLFFBQWlCOzs7UUFFekUsSUFBSSxNQUFNLEtBQUssQ0FBQyxJQUFJLE9BQU8sSUFBSSxPQUFPLElBQUksUUFBUSxFQUFFO1lBQ2hELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQUU7WUFDNUQsT0FBTyxJQUFJLENBQUM7U0FDZjs7UUFHRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7YUFDL0MsU0FBUyxDQUFDLFVBQUEsQ0FBQztZQUNSLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNyQyxpQkFBTSxPQUFPLGFBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDckQsQ0FBQyxDQUFDO1FBRVAsT0FBTyxLQUFLLENBQUM7Ozs7O0lBR2pCLDZDQUFXOzs7SUFBWDtRQUNJLGlCQUFNLFdBQVcsV0FBRSxDQUFDOztRQUVwQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUN4QixJQUFJLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDeEM7S0FDSjs7Z0JBN0NKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2lCQUM5Qjs7OztnQkFUNEIsTUFBTTtnQkFBRSxjQUFjO2dCQUMxQyxnQkFBZ0I7OztvQ0FXcEIsS0FBSztpQ0FFTCxLQUFLOzRCQVdMLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUM7O2tDQTFCbkc7RUFXNkMsa0JBQWtCOzs7Ozs7Ozs7OztJQ0FwQkEseUNBQWdCO0lBTXZELCtCQUFZLE1BQWMsRUFBRSxPQUFtQixFQUFFLFFBQW1CLEVBQUUsR0FBc0I7ZUFDeEYsa0JBQU0sTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDO0tBQ3hDOzBCQUdHLHFEQUFrQjs7Ozs7a0JBQUMsSUFBdUI7WUFDMUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQzs7Ozs7O2dCQWZwQyxTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjtpQkFDcEM7Ozs7Z0JBVjBCLE1BQU07Z0JBQ2UsVUFBVTtnQkFBRSxTQUFTO2dCQUFFLGlCQUFpQjs7O21DQWFuRixlQUFlLFNBQUMsdUJBQXVCLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFO3VDQU85RCxLQUFLOztnQ0FyQlY7RUFXMkMsZ0JBQWdCOzs7Ozs7QUNYM0Q7Ozs7Z0JBS0MsUUFBUSxTQUFDO29CQUNOLE9BQU8sRUFBRTt3QkFDTCxZQUFZO3FCQUNmO29CQUNELFlBQVksRUFBRTt3QkFDVix1QkFBdUI7d0JBQ3ZCLHFCQUFxQjtxQkFDeEI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLHVCQUF1Qjt3QkFDdkIscUJBQXFCO3FCQUN4QjtpQkFDSjs7OztnQ0FqQkQ7Ozs7Ozs7Ozs7Ozs7OzsifQ==