(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/router'),require('@angular/common'),exports, require('@angular/core'), require('@angular/router'), require('@angular/common'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@bcodes/ngx-routerlink-delay', ['@angular/core','@angular/router','@angular/common','exports', '@angular/core', '@angular/router', '@angular/common', 'rxjs'], factory) :
    (factory(global.ng.core,global.ng.router,global.ng.common,(global.bcodes = global.bcodes || {}, global.bcodes['ngx-routerlink-delay'] = {}),global.ng.core,global.ng.router,global.ng.common,global.rxjs));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,exports,core,router,common,rxjs) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Extends {\@link RouterLinkWithHref}
     * @see https://github.com/angular/angular/blob/master/packages/router/src/directives/router_link.ts
     */
    var RouterLinkWithHrefDelay = (function (_super) {
        __extends(RouterLinkWithHrefDelay, _super);
        function RouterLinkWithHrefDelay(router$$1, route, locationStrategy) {
            var _this = _super.call(this, router$$1, route, locationStrategy) || this;
            _this.navigationDelay = 0;
            return _this;
        }
        Object.defineProperty(RouterLinkWithHrefDelay.prototype, "bcRouterLink", {
            set: /**
             * @param {?} commands
             * @return {?}
             */ function (commands) {
                this.routerLink = commands;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} button
         * @param {?} ctrlKey
         * @param {?} metaKey
         * @param {?} shiftKey
         * @return {?}
         */
        RouterLinkWithHrefDelay.prototype.onClick = /**
         * @param {?} button
         * @param {?} ctrlKey
         * @param {?} metaKey
         * @param {?} shiftKey
         * @return {?}
         */
            function (button, ctrlKey, metaKey, shiftKey) {
                var _this = this;
                // clone the checks being made in super()
                if (button !== 0 || ctrlKey || metaKey || shiftKey) {
                    return true;
                }
                if (typeof this.target === 'string' && this.target !== '_self') {
                    return true;
                }
                // Omits Observable.timer 'period' argument so  runs once
                this.timerSubscription = rxjs.timer(this.navigationDelay)
                    .subscribe(function (t) {
                    _this.timerSubscription.unsubscribe();
                    _super.prototype.onClick.call(_this, button, ctrlKey, metaKey, shiftKey);
                });
                return false;
            };
        /**
         * @return {?}
         */
        RouterLinkWithHrefDelay.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                _super.prototype.ngOnDestroy.call(this);
                // If the component is destroyed before the timer completes
                if (this.timerSubscription) {
                    this.timerSubscription.unsubscribe();
                }
            };
        /** @nocollapse */
        RouterLinkWithHrefDelay.ctorParameters = function () {
            return [
                { type: router.Router, },
                { type: router.ActivatedRoute, },
                { type: common.LocationStrategy, },
            ];
        };
        RouterLinkWithHrefDelay.propDecorators = {
            "navigationDelay": [{ type: core.Input },],
            "bcRouterLink": [{ type: core.Input },],
            "onClick": [{ type: core.HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] },],
        };
RouterLinkWithHrefDelay.ɵfac = function RouterLinkWithHrefDelay_Factory(t) { return new (t || RouterLinkWithHrefDelay)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ActivatedRoute), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocationStrategy)); };
RouterLinkWithHrefDelay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RouterLinkWithHrefDelay, selectors: [["a", "bcRouterLink", ""]], hostBindings: function RouterLinkWithHrefDelay_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function RouterLinkWithHrefDelay_click_HostBindingHandler($event) { return ctx.onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey); });
    } }, inputs: { bcRouterLink: "bcRouterLink", navigationDelay: "navigationDelay" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RouterLinkWithHrefDelay, [{
        type: core.Directive,
        args: [{
                selector: 'a[bcRouterLink]'
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc1.ActivatedRoute }, { type: ɵngcc2.LocationStrategy }]; }, { bcRouterLink: [{
            type: core.Input
        }], onClick: [{
            type: core.HostListener,
            args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey']]
        }], navigationDelay: [{
            type: core.Input
        }] }); })();
        return RouterLinkWithHrefDelay;
    }(router.RouterLinkWithHref));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * Extends {\@link RouterLinkActive }
     * @see https://github.com/angular/angular/blob/master/packages/router/src/directives/router_link_active.ts
     */
    var RouterLinkActiveDelay = (function (_super) {
        __extends(RouterLinkActiveDelay, _super);
        function RouterLinkActiveDelay(router$$1, element, renderer, cdr) {
            return _super.call(this, router$$1, element, renderer, cdr) || this;
        }
        Object.defineProperty(RouterLinkActiveDelay.prototype, "bcRouterLinkActive", {
            set: /**
             * @param {?} data
             * @return {?}
             */ function (data) {
                this.routerLinkActive = data;
            },
            enumerable: true,
            configurable: true
        });
        /** @nocollapse */
        RouterLinkActiveDelay.ctorParameters = function () {
            return [
                { type: router.Router, },
                { type: core.ElementRef, },
                { type: core.Renderer2, },
                { type: core.ChangeDetectorRef, },
            ];
        };
        RouterLinkActiveDelay.propDecorators = {
            "linksWithHrefs": [{ type: core.ContentChildren, args: [RouterLinkWithHrefDelay, { descendants: true },] },],
            "bcRouterLinkActive": [{ type: core.Input },],
        };
RouterLinkActiveDelay.ɵfac = function RouterLinkActiveDelay_Factory(t) { return new (t || RouterLinkActiveDelay)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Router), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
RouterLinkActiveDelay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: RouterLinkActiveDelay, selectors: [["a", "bcRouterLinkActive", ""]], contentQueries: function RouterLinkActiveDelay_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, RouterLinkWithHrefDelay, 1);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.linksWithHrefs = _t);
    } }, inputs: { bcRouterLinkActive: "bcRouterLinkActive" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RouterLinkActiveDelay, [{
        type: core.Directive,
        args: [{
                selector: 'a[bcRouterLinkActive]'
            }]
    }], function () { return [{ type: ɵngcc1.Router }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }]; }, { bcRouterLinkActive: [{
            type: core.Input
        }], linksWithHrefs: [{
            type: core.ContentChildren,
            args: [RouterLinkWithHrefDelay, { descendants: true }]
        }] }); })();
        return RouterLinkActiveDelay;
    }(router.RouterLinkActive));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RouterLinkDelayModule = (function () {
        function RouterLinkDelayModule() {
        }
        /** @nocollapse */
        RouterLinkDelayModule.ctorParameters = function () { return []; };
RouterLinkDelayModule.ɵfac = function RouterLinkDelayModule_Factory(t) { return new (t || RouterLinkDelayModule)(); };
RouterLinkDelayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: RouterLinkDelayModule });
RouterLinkDelayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            common.CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RouterLinkDelayModule, { declarations: [RouterLinkWithHrefDelay, RouterLinkActiveDelay], imports: [ɵngcc2.CommonModule], exports: [RouterLinkWithHrefDelay, RouterLinkActiveDelay] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(RouterLinkDelayModule, [{
        type: core.NgModule,
        args: [{
                imports: [
                    common.CommonModule
                ],
                declarations: [
                    RouterLinkWithHrefDelay,
                    RouterLinkActiveDelay
                ],
                exports: [
                    RouterLinkWithHrefDelay,
                    RouterLinkActiveDelay
                ]
            }]
    }], function () { return []; }, null); })();
        return RouterLinkDelayModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.RouterLinkWithHrefDelay = RouterLinkWithHrefDelay;
    exports.RouterLinkActiveDelay = RouterLinkActiveDelay;
    exports.RouterLinkDelayModule = RouterLinkDelayModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,